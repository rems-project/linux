# This is a config file for the Sail generated from ARM-ASL

pc = "_PC"

translation_function = "AArch64_TranslateAddress"

in_program_order = ["sail_barrier", "sail_cache_op", "sail_take_exception", "sail_return_exception", "sail_tlbi"]

# litmus variables have type uint32_t by default
default_sizeof = 4

# The assembler is used for assembling the code in litmus tests. We
# assume it takes arguments like GNU as.
[[toolchain]]
name = "macos-aarch64"
os = "macos"
arch = "aarch64"
assembler = "as --target=aarch64-unknown-linux-gnu"
objdump = "/opt/homebrew/opt/llvm/bin/llvm-objdump"
nm = "/opt/homebrew/opt/llvm/bin/llvm-nm"
linker = "/opt/homebrew/opt/llvm/bin/ld.lld"

[[toolchain]]
name = "default"
assembler = "aarch64-linux-gnu-as -march=armv8.1-a"
objdump = "aarch64-linux-gnu-objdump"
nm = "aarch64-linux-gnu-nm"
linker = "aarch64-linux-gnu-ld"

[mmu]
page_table_base = "0x300000"
page_size = "4096"
s2_page_table_base = "0x200000"
s2_page_size = "4096"

# This section contains the base address for loading the code for each
# thread in a litmus test, and the stride which is the distance
# between each thread in bytes. The overall range for thread memory is
# the half-open range [base,top)"
[threads]
base = "0x400000"
top = "0x500000"
stride = "0x1000"

# If we want to give symbolic addresses concrete values, then we start
# with a base address and increment by stride for each new symbolic
# address.
[symbolic_addrs]
base = "0x600000"
top = "0x700000"
stride = "0x10"

[registers]
ignore = [
  "_PC",
  "SEE",
  "__trickbox_enabled",
  "__v81_implemented",
  "__v82_implemented",
  "__v83_implemented",
  "__v84_implemented",
  "__v85_implemented"
]

[registers.defaults]
"__isla_vector_gpr" = false
#"__isla_continue_on_see" = true
"__monomorphize_reads" = false
"__monomorphize_writes" = false
"InGuardedPage" = false
"MDSCR_EL1" = "0x0000000000000000"
"__highest_el_aarch32" = false
"__CNTControlBase" = "0x0000000000000"
"__supported_pa_size" = 52
"__supported_va_size" = 52
"__max_implemented_smeveclen" = 512
# Need to investigate BTI extension. Guard pages cause problems with
# memory accesses.
"__v81_implemented" = true
"__v82_implemented" = false
"__v83_implemented" = false
"__v84_implemented" = false
"__v85_implemented" = false
"__unpred_tsize_aborts" = true
# Trickbox has various features for debugging spec and running tests
"__trickbox_enabled" = false
"__tlb_enabled" = false
"__syncAbortOnTTWNonCache" = true
"__syncAbortOnTTWCache" = true
"__syncAbortOnSoWrite" = true
"__syncAbortOnSoRead" = true
"__syncAbortOnReadNormNonCache" = true
"__syncAbortOnReadNormCache" = true
"__syncAbortOnPrefetch" = true
"__syncAbortOnDeviceRead" = true
"__mte_implemented" = "0b0000"
"__brbev1p1_implemented" = false
"__rme_implemented" = false
"__brbe_implemented" = false
"__empam_implemented" = false
"__pac_frac_implemented" = false
"__pacqarma3_implemented" = false
"__has_sme" = false
"__mpam_has_hcr" = true
"__mpam_has_altsp" = true
"__vmid16_implemented" = true
"__pan_implemented" = true
"__fp16_implemented" = true
"__dot_product_implemented" = true
"__crc32_implemented" = true
"__aa32_hpd_implemented" = true
"__crypto_aes_implemented" = 2
"__crypto_sha256_implemented" = true
"__crypto_sha1_implemented" = true
"__syncAbortOnWriteNormNonCache" = false
"__syncAbortOnWriteNormCache" = false
"__syncAbortOnDeviceWrite" = false
"__mpam_implemented" = false
"__crypto_sm4_implemented" = false
"__crypto_sm3_implemented" = false
"__crypto_sha512_implemented" = false
"__crypto_sha3_implemented" = false
"__feat_ls64_v" = true
"__feat_ls64_accdata" = true

# These registers are set during symbolic execution by the special builtin "reset_registers"
[registers.reset]
# Bit 1 being unset allows unaligned accesses
# Bit 26 being set allows cache-maintenance ops in EL0
"SCTLR_EL1" = "0x0000000004000000"
"CNTCR" = "0x00000000"

# Registers pulled from pKVM after __pkvm_prot_finalize in QEMU
"__ThisInstrEnc" = "__A64"

"SCTLR_EL2" = "0x30ed183d"
"HCR_EL2" = "0x80080001"
"TCR_EL2" = "0x80843510"
"MAIR_EL2" = "0x40e44ffff"
"VTCR_EL2" = "0x80243594"
"MDCR_EL2" = "0x4"
"ID_AA64AFR0_EL1" = "0x0"
"ID_AA64AFR1_EL1" = "0x0"
"ID_AA64PFR0_EL1" = "0x1000222"
"ID_AA64PFR1_EL1" = "0x0"
"ID_AA64DFR0_EL1" = "0x10305106"
"ID_AA64DFR1_EL1" = "0x0"
"ID_AA64MMFR0_EL1" = "0x1124"
"ID_AA64MMFR1_EL1" = "0x0"
"ID_AA64MMFR2_EL1" = "0x0"
"ID_AA64ISAR0_EL1" = "0x11120"
"ID_AA64ISAR1_EL1" = "0x0"
"PSTATE.IL" = "0b0"
"PSTATE.D" = "0b1"
"PSTATE.A" = "0b1"
"PSTATE.I" = "0b1"
"PSTATE.F" = "0b1"
"PSTATE.EL" = "0b10"
"PSTATE.SP" = "0x1"
"PSTATE.nRW" = "0b0"

"VBAR_EL1" = "0x1111222233334444"

# Extra stuff by hand
# all this should go away if we can pick impl-defined choices here instead...
"TSTATE.depth" = "0"
"PSTATE.SM" = "0b0"
"PSTATE.PAN" = "0b0"
"PSTATE.TCO" = "0b0"
"PSTATE.DIT" = "0b0"
"PSTATE.UAO" = "0b0"
"PSTATE.ALLINT" = "0b0"
"PSTATE.SSBS" = "0b0"
"PSTATE.BTYPE" = "0b00"

"TCR_EL1" = "0x0000000000000000"

"SCR_EL3" = "0x0000000000000000"

"SMCR_EL1" = "0x0000000000000000"
"SMCR_EL3" = "0x0000000000000000"

"ZCR_EL1" = "0x0000000000000000"
"ZCR_EL2" = "0x0000000000000000"
"ZCR_EL3" = "0x0000000000000000"

"MDCCSR_EL0" = "0x0000000000000000"
"OSECCR_EL1" = "0x0000000000000000"
"_EDSCR_0_28" = "0x000000"
"_EDSCR_31_31" = "0b0"
"DBGEN" = "LOW"
"SPIDEN" = "LOW"

# A map from register names that may appear in litmus files to Sail
# register names
[registers.renames]
"X0" = "R0"
"X1" = "R1"
"X2" = "R2"
"X3" = "R3"
"X4" = "R4"
"X5" = "R5"
"X6" = "R6"
"X7" = "R7"
"X8" = "R8"
"X9" = "R9"
"X10" = "R10"
"X11" = "R11"
"X12" = "R12"
"X13" = "R13"
"X14" = "R14"
"X15" = "R15"
"X16" = "R16"
"X17" = "R17"
"X18" = "R18"
"X19" = "R19"
"X20" = "R20"
"X21" = "R21"
"X22" = "R22"
"X23" = "R23"
"X24" = "R24"
"X25" = "R25"
"X26" = "R26"
"X27" = "R27"
"X28" = "R28"
"X29" = "R29"
"X30" = "R30"
"W0" = "R0"
"W1" = "R1"
"W2" = "R2"
"W3" = "R3"
"W4" = "R4"
"W5" = "R5"
"W6" = "R6"
"W7" = "R7"
"W8" = "R8"
"W9" = "R9"
"W10" = "R10"
"W11" = "R11"
"W12" = "R12"
"W13" = "R13"
"W14" = "R14"
"W15" = "R15"
"W16" = "R16"
"W17" = "R17"
"W18" = "R18"
"W19" = "R19"
"W20" = "R20"
"W21" = "R21"
"W22" = "R22"
"W23" = "R23"
"W24" = "R24"
"W25" = "R25"
"W26" = "R26"
"W27" = "R27"
"W28" = "R28"
"W29" = "R29"
"W30" = "R30"

